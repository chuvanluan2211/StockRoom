// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMSSMSystem.Core.Data;

#nullable disable

namespace SMSSMSystem.Core.Migrations
{
    [DbContext(typeof(StockRoomContext))]
    [Migration("20230927083804_Initial1")]
    partial class Initial1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ImportProductInvoice", b =>
                {
                    b.Property<Guid>("ImportProductInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ImportProductInvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ImportProductInvoices");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ImportProductInvoiceDetail", b =>
                {
                    b.Property<Guid>("ImportProductInvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ImportProductInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ImportProductInvoiceDetailId");

                    b.HasIndex("ImportProductInvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ImportProductInvoiceDetails");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ExportPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImportPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Weight")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ProductImport", b =>
                {
                    b.Property<Guid>("ProductImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductImportId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImports");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ProductPutOut", b =>
                {
                    b.Property<Guid>("ProductPutOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductPutOutId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPutOuts");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Shelf", b =>
                {
                    b.Property<Guid>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShelfName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShelfId");

                    b.ToTable("Shelfs");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ShelfColumn", b =>
                {
                    b.Property<Guid>("ShelfColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShelfColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ShelfRowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShelfColumnId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShelfRowId");

                    b.ToTable("ShelfColumns");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ShelfRow", b =>
                {
                    b.Property<Guid>("ShelfRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShelfRowName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShelfRowId");

                    b.HasIndex("ShelfId");

                    b.ToTable("ShelfRows");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.StockRoom", b =>
                {
                    b.Property<Guid>("StockRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("ExportPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImportPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ImportProductInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShelfColumnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockRoomId");

                    b.HasIndex("ImportProductInvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShelfColumnId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockRooms");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.SupplierCriteria", b =>
                {
                    b.Property<Guid>("SupplierCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeliveryAttitude")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryProgress")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuality")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplierCriteriaId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierCriterias");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Types", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.UnPaidInvoice", b =>
                {
                    b.Property<Guid>("UnPaidInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnPaidInvoiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnPaidInvoiceId");

                    b.ToTable("UnPaidInvoices");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.UnPaidInvoiceDetail", b =>
                {
                    b.Property<Guid>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UnpaidInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnpaidInvoiceId");

                    b.ToTable("UnPaidInvoiceDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ImportProductInvoice", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Supplier", "Supplier")
                        .WithMany("ImportProductInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ImportProductInvoiceDetail", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.ImportProductInvoice", "ImportProductInvoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ImportProductInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.Product", "Product")
                        .WithMany("ImportProductInvoiceDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportProductInvoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Product", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.Types", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ProductImport", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Product", "Product")
                        .WithMany("ProductImports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ProductPutOut", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Product", "Product")
                        .WithMany("ProductPutOuts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ShelfColumn", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Product", "Product")
                        .WithMany("ShelfColumns")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.ShelfRow", "ShelfRow")
                        .WithMany("ShelfColumns")
                        .HasForeignKey("ShelfRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShelfRow");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ShelfRow", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Shelf", "Shelf")
                        .WithMany("ShelfRows")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.StockRoom", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.ImportProductInvoice", "ImportProductInvoice")
                        .WithMany("StockRoom")
                        .HasForeignKey("ImportProductInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.Product", "Product")
                        .WithMany("StockRoom")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.ShelfColumn", "ShelfColumn")
                        .WithMany("StockRoom")
                        .HasForeignKey("ShelfColumnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.Supplier", "Supplier")
                        .WithMany("StockRoom")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImportProductInvoice");

                    b.Navigation("Product");

                    b.Navigation("ShelfColumn");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.SupplierCriteria", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Supplier", "Supplier")
                        .WithMany("SupplierCriterias")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.UnPaidInvoiceDetail", b =>
                {
                    b.HasOne("SMSSMSystem.Core.Models.Product", "Product")
                        .WithMany("UnPaidInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSSMSystem.Core.Models.UnPaidInvoice", "UnPaidInvoice")
                        .WithMany("UnPaidInvoiceDetails")
                        .HasForeignKey("UnpaidInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UnPaidInvoice");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ImportProductInvoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("StockRoom");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Product", b =>
                {
                    b.Navigation("ImportProductInvoiceDetail");

                    b.Navigation("ProductImports");

                    b.Navigation("ProductPutOuts");

                    b.Navigation("ShelfColumns");

                    b.Navigation("StockRoom");

                    b.Navigation("UnPaidInvoiceDetails");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Shelf", b =>
                {
                    b.Navigation("ShelfRows");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ShelfColumn", b =>
                {
                    b.Navigation("StockRoom");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.ShelfRow", b =>
                {
                    b.Navigation("ShelfColumns");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Supplier", b =>
                {
                    b.Navigation("ImportProductInvoices");

                    b.Navigation("StockRoom");

                    b.Navigation("SupplierCriterias");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.Types", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SMSSMSystem.Core.Models.UnPaidInvoice", b =>
                {
                    b.Navigation("UnPaidInvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
